// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/panupong/app/ent/gender"
	"github.com/panupong/app/ent/job"
	"github.com/panupong/app/ent/patient"
	"github.com/panupong/app/ent/title"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGender  = "Gender"
	TypeJob     = "Job"
	TypePatient = "Patient"
	TypeTitle   = "Title"
)

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op             Op
	typ            string
	id             *int
	_Gender_type   *string
	clearedFields  map[string]struct{}
	genders        map[int]struct{}
	removedgenders map[int]struct{}
	done           bool
	oldValue       func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGenderType sets the Gender_type field.
func (m *GenderMutation) SetGenderType(s string) {
	m._Gender_type = &s
}

// GenderType returns the Gender_type value in the mutation.
func (m *GenderMutation) GenderType() (r string, exists bool) {
	v := m._Gender_type
	if v == nil {
		return
	}
	return *v, true
}

// OldGenderType returns the old Gender_type value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldGenderType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGenderType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGenderType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenderType: %w", err)
	}
	return oldValue.GenderType, nil
}

// ResetGenderType reset all changes of the "Gender_type" field.
func (m *GenderMutation) ResetGenderType() {
	m._Gender_type = nil
}

// AddGenderIDs adds the genders edge to Patient by ids.
func (m *GenderMutation) AddGenderIDs(ids ...int) {
	if m.genders == nil {
		m.genders = make(map[int]struct{})
	}
	for i := range ids {
		m.genders[ids[i]] = struct{}{}
	}
}

// RemoveGenderIDs removes the genders edge to Patient by ids.
func (m *GenderMutation) RemoveGenderIDs(ids ...int) {
	if m.removedgenders == nil {
		m.removedgenders = make(map[int]struct{})
	}
	for i := range ids {
		m.removedgenders[ids[i]] = struct{}{}
	}
}

// RemovedGenders returns the removed ids of genders.
func (m *GenderMutation) RemovedGendersIDs() (ids []int) {
	for id := range m.removedgenders {
		ids = append(ids, id)
	}
	return
}

// GendersIDs returns the genders ids in the mutation.
func (m *GenderMutation) GendersIDs() (ids []int) {
	for id := range m.genders {
		ids = append(ids, id)
	}
	return
}

// ResetGenders reset all changes of the "genders" edge.
func (m *GenderMutation) ResetGenders() {
	m.genders = nil
	m.removedgenders = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Gender_type != nil {
		fields = append(fields, gender.FieldGenderType)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldGenderType:
		return m.GenderType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldGenderType:
		return m.OldGenderType(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldGenderType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenderType(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldGenderType:
		m.ResetGenderType()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.genders != nil {
		edges = append(edges, gender.EdgeGenders)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgeGenders:
		ids := make([]ent.Value, 0, len(m.genders))
		for id := range m.genders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedgenders != nil {
		edges = append(edges, gender.EdgeGenders)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgeGenders:
		ids := make([]ent.Value, 0, len(m.removedgenders))
		for id := range m.removedgenders {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgeGenders:
		m.ResetGenders()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// JobMutation represents an operation that mutate the Jobs
// nodes in the graph.
type JobMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Job_name     *string
	clearedFields map[string]struct{}
	jobs          map[int]struct{}
	removedjobs   map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Job, error)
}

var _ ent.Mutation = (*JobMutation)(nil)

// jobOption allows to manage the mutation configuration using functional options.
type jobOption func(*JobMutation)

// newJobMutation creates new mutation for $n.Name.
func newJobMutation(c config, op Op, opts ...jobOption) *JobMutation {
	m := &JobMutation{
		config:        c,
		op:            op,
		typ:           TypeJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobID sets the id field of the mutation.
func withJobID(id int) jobOption {
	return func(m *JobMutation) {
		var (
			err   error
			once  sync.Once
			value *Job
		)
		m.oldValue = func(ctx context.Context) (*Job, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Job.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJob sets the old Job of the mutation.
func withJob(node *Job) jobOption {
	return func(m *JobMutation) {
		m.oldValue = func(context.Context) (*Job, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *JobMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetJobName sets the Job_name field.
func (m *JobMutation) SetJobName(s string) {
	m._Job_name = &s
}

// JobName returns the Job_name value in the mutation.
func (m *JobMutation) JobName() (r string, exists bool) {
	v := m._Job_name
	if v == nil {
		return
	}
	return *v, true
}

// OldJobName returns the old Job_name value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldJobName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldJobName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldJobName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobName: %w", err)
	}
	return oldValue.JobName, nil
}

// ResetJobName reset all changes of the "Job_name" field.
func (m *JobMutation) ResetJobName() {
	m._Job_name = nil
}

// AddJobIDs adds the jobs edge to Patient by ids.
func (m *JobMutation) AddJobIDs(ids ...int) {
	if m.jobs == nil {
		m.jobs = make(map[int]struct{})
	}
	for i := range ids {
		m.jobs[ids[i]] = struct{}{}
	}
}

// RemoveJobIDs removes the jobs edge to Patient by ids.
func (m *JobMutation) RemoveJobIDs(ids ...int) {
	if m.removedjobs == nil {
		m.removedjobs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedjobs[ids[i]] = struct{}{}
	}
}

// RemovedJobs returns the removed ids of jobs.
func (m *JobMutation) RemovedJobsIDs() (ids []int) {
	for id := range m.removedjobs {
		ids = append(ids, id)
	}
	return
}

// JobsIDs returns the jobs ids in the mutation.
func (m *JobMutation) JobsIDs() (ids []int) {
	for id := range m.jobs {
		ids = append(ids, id)
	}
	return
}

// ResetJobs reset all changes of the "jobs" edge.
func (m *JobMutation) ResetJobs() {
	m.jobs = nil
	m.removedjobs = nil
}

// Op returns the operation name.
func (m *JobMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Job).
func (m *JobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *JobMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Job_name != nil {
		fields = append(fields, job.FieldJobName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *JobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case job.FieldJobName:
		return m.JobName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *JobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case job.FieldJobName:
		return m.OldJobName(ctx)
	}
	return nil, fmt.Errorf("unknown Job field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case job.FieldJobName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobName(v)
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *JobMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *JobMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Job numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *JobMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *JobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Job nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *JobMutation) ResetField(name string) error {
	switch name {
	case job.FieldJobName:
		m.ResetJobName()
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *JobMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.jobs != nil {
		edges = append(edges, job.EdgeJobs)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *JobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeJobs:
		ids := make([]ent.Value, 0, len(m.jobs))
		for id := range m.jobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *JobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedjobs != nil {
		edges = append(edges, job.EdgeJobs)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *JobMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeJobs:
		ids := make([]ent.Value, 0, len(m.removedjobs))
		for id := range m.removedjobs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *JobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *JobMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *JobMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Job unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *JobMutation) ResetEdge(name string) error {
	switch name {
	case job.EdgeJobs:
		m.ResetJobs()
		return nil
	}
	return fmt.Errorf("unknown Job edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_Card_id        *string
	_Fist_name      *string
	_Last_name      *string
	_Allergic       *string
	age             *int
	addage          *int
	clearedFields   map[string]struct{}
	patients        *int
	clearedpatients bool
	patients        *int
	clearedpatients bool
	patients        *int
	clearedpatients bool
	done            bool
	oldValue        func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCardID sets the Card_id field.
func (m *PatientMutation) SetCardID(s string) {
	m._Card_id = &s
}

// CardID returns the Card_id value in the mutation.
func (m *PatientMutation) CardID() (r string, exists bool) {
	v := m._Card_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCardID returns the old Card_id value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldCardID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCardID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCardID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCardID: %w", err)
	}
	return oldValue.CardID, nil
}

// ResetCardID reset all changes of the "Card_id" field.
func (m *PatientMutation) ResetCardID() {
	m._Card_id = nil
}

// SetFistName sets the Fist_name field.
func (m *PatientMutation) SetFistName(s string) {
	m._Fist_name = &s
}

// FistName returns the Fist_name value in the mutation.
func (m *PatientMutation) FistName() (r string, exists bool) {
	v := m._Fist_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFistName returns the old Fist_name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldFistName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFistName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFistName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFistName: %w", err)
	}
	return oldValue.FistName, nil
}

// ResetFistName reset all changes of the "Fist_name" field.
func (m *PatientMutation) ResetFistName() {
	m._Fist_name = nil
}

// SetLastName sets the Last_name field.
func (m *PatientMutation) SetLastName(s string) {
	m._Last_name = &s
}

// LastName returns the Last_name value in the mutation.
func (m *PatientMutation) LastName() (r string, exists bool) {
	v := m._Last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old Last_name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName reset all changes of the "Last_name" field.
func (m *PatientMutation) ResetLastName() {
	m._Last_name = nil
}

// SetAllergic sets the Allergic field.
func (m *PatientMutation) SetAllergic(s string) {
	m._Allergic = &s
}

// Allergic returns the Allergic value in the mutation.
func (m *PatientMutation) Allergic() (r string, exists bool) {
	v := m._Allergic
	if v == nil {
		return
	}
	return *v, true
}

// OldAllergic returns the old Allergic value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAllergic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAllergic is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAllergic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAllergic: %w", err)
	}
	return oldValue.Allergic, nil
}

// ResetAllergic reset all changes of the "Allergic" field.
func (m *PatientMutation) ResetAllergic() {
	m._Allergic = nil
}

// SetAge sets the age field.
func (m *PatientMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *PatientMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old age value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to age.
func (m *PatientMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *PatientMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the "age" field.
func (m *PatientMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetPatientsID sets the patients edge to Gender by id.
func (m *PatientMutation) SetPatientsID(id int) {
	m.patients = &id
}

// ClearPatients clears the patients edge to Gender.
func (m *PatientMutation) ClearPatients() {
	m.clearedpatients = true
}

// PatientsCleared returns if the edge patients was cleared.
func (m *PatientMutation) PatientsCleared() bool {
	return m.clearedpatients
}

// PatientsID returns the patients id in the mutation.
func (m *PatientMutation) PatientsID() (id int, exists bool) {
	if m.patients != nil {
		return *m.patients, true
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientsID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) PatientsIDs() (ids []int) {
	if id := m.patients; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *PatientMutation) ResetPatients() {
	m.patients = nil
	m.clearedpatients = false
}

// SetPatientsID sets the patients edge to Title by id.
func (m *PatientMutation) SetPatientsID(id int) {
	m.patients = &id
}

// ClearPatients clears the patients edge to Title.
func (m *PatientMutation) ClearPatients() {
	m.clearedpatients = true
}

// PatientsCleared returns if the edge patients was cleared.
func (m *PatientMutation) PatientsCleared() bool {
	return m.clearedpatients
}

// PatientsID returns the patients id in the mutation.
func (m *PatientMutation) PatientsID() (id int, exists bool) {
	if m.patients != nil {
		return *m.patients, true
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientsID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) PatientsIDs() (ids []int) {
	if id := m.patients; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *PatientMutation) ResetPatients() {
	m.patients = nil
	m.clearedpatients = false
}

// SetPatientsID sets the patients edge to Job by id.
func (m *PatientMutation) SetPatientsID(id int) {
	m.patients = &id
}

// ClearPatients clears the patients edge to Job.
func (m *PatientMutation) ClearPatients() {
	m.clearedpatients = true
}

// PatientsCleared returns if the edge patients was cleared.
func (m *PatientMutation) PatientsCleared() bool {
	return m.clearedpatients
}

// PatientsID returns the patients id in the mutation.
func (m *PatientMutation) PatientsID() (id int, exists bool) {
	if m.patients != nil {
		return *m.patients, true
	}
	return
}

// PatientsIDs returns the patients ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientsID instead. It exists only for internal usage by the builders.
func (m *PatientMutation) PatientsIDs() (ids []int) {
	if id := m.patients; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatients reset all changes of the "patients" edge.
func (m *PatientMutation) ResetPatients() {
	m.patients = nil
	m.clearedpatients = false
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._Card_id != nil {
		fields = append(fields, patient.FieldCardID)
	}
	if m._Fist_name != nil {
		fields = append(fields, patient.FieldFistName)
	}
	if m._Last_name != nil {
		fields = append(fields, patient.FieldLastName)
	}
	if m._Allergic != nil {
		fields = append(fields, patient.FieldAllergic)
	}
	if m.age != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldCardID:
		return m.CardID()
	case patient.FieldFistName:
		return m.FistName()
	case patient.FieldLastName:
		return m.LastName()
	case patient.FieldAllergic:
		return m.Allergic()
	case patient.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldCardID:
		return m.OldCardID(ctx)
	case patient.FieldFistName:
		return m.OldFistName(ctx)
	case patient.FieldLastName:
		return m.OldLastName(ctx)
	case patient.FieldAllergic:
		return m.OldAllergic(ctx)
	case patient.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldCardID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCardID(v)
		return nil
	case patient.FieldFistName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFistName(v)
		return nil
	case patient.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case patient.FieldAllergic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAllergic(v)
		return nil
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, patient.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case patient.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldCardID:
		m.ResetCardID()
		return nil
	case patient.FieldFistName:
		m.ResetFistName()
		return nil
	case patient.FieldLastName:
		m.ResetLastName()
		return nil
	case patient.FieldAllergic:
		m.ResetAllergic()
		return nil
	case patient.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.patients != nil {
		edges = append(edges, patient.EdgePatients)
	}
	if m.patients != nil {
		edges = append(edges, patient.EdgePatients)
	}
	if m.patients != nil {
		edges = append(edges, patient.EdgePatients)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatients:
		if id := m.patients; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgePatients:
		if id := m.patients; id != nil {
			return []ent.Value{*id}
		}
	case patient.EdgePatients:
		if id := m.patients; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedpatients {
		edges = append(edges, patient.EdgePatients)
	}
	if m.clearedpatients {
		edges = append(edges, patient.EdgePatients)
	}
	if m.clearedpatients {
		edges = append(edges, patient.EdgePatients)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	case patient.EdgePatients:
		return m.clearedpatients
	case patient.EdgePatients:
		return m.clearedpatients
	case patient.EdgePatients:
		return m.clearedpatients
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	case patient.EdgePatients:
		m.ClearPatients()
		return nil
	case patient.EdgePatients:
		m.ClearPatients()
		return nil
	case patient.EdgePatients:
		m.ClearPatients()
		return nil
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePatients:
		m.ResetPatients()
		return nil
	case patient.EdgePatients:
		m.ResetPatients()
		return nil
	case patient.EdgePatients:
		m.ResetPatients()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// TitleMutation represents an operation that mutate the Titles
// nodes in the graph.
type TitleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	_Title_type   *string
	clearedFields map[string]struct{}
	titles        map[int]struct{}
	removedtitles map[int]struct{}
	done          bool
	oldValue      func(context.Context) (*Title, error)
}

var _ ent.Mutation = (*TitleMutation)(nil)

// titleOption allows to manage the mutation configuration using functional options.
type titleOption func(*TitleMutation)

// newTitleMutation creates new mutation for $n.Name.
func newTitleMutation(c config, op Op, opts ...titleOption) *TitleMutation {
	m := &TitleMutation{
		config:        c,
		op:            op,
		typ:           TypeTitle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTitleID sets the id field of the mutation.
func withTitleID(id int) titleOption {
	return func(m *TitleMutation) {
		var (
			err   error
			once  sync.Once
			value *Title
		)
		m.oldValue = func(ctx context.Context) (*Title, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Title.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTitle sets the old Title of the mutation.
func withTitle(node *Title) titleOption {
	return func(m *TitleMutation) {
		m.oldValue = func(context.Context) (*Title, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TitleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TitleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TitleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitleType sets the Title_type field.
func (m *TitleMutation) SetTitleType(s string) {
	m._Title_type = &s
}

// TitleType returns the Title_type value in the mutation.
func (m *TitleMutation) TitleType() (r string, exists bool) {
	v := m._Title_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTitleType returns the old Title_type value of the Title.
// If the Title object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TitleMutation) OldTitleType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitleType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitleType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitleType: %w", err)
	}
	return oldValue.TitleType, nil
}

// ResetTitleType reset all changes of the "Title_type" field.
func (m *TitleMutation) ResetTitleType() {
	m._Title_type = nil
}

// AddTitleIDs adds the titles edge to Patient by ids.
func (m *TitleMutation) AddTitleIDs(ids ...int) {
	if m.titles == nil {
		m.titles = make(map[int]struct{})
	}
	for i := range ids {
		m.titles[ids[i]] = struct{}{}
	}
}

// RemoveTitleIDs removes the titles edge to Patient by ids.
func (m *TitleMutation) RemoveTitleIDs(ids ...int) {
	if m.removedtitles == nil {
		m.removedtitles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedtitles[ids[i]] = struct{}{}
	}
}

// RemovedTitles returns the removed ids of titles.
func (m *TitleMutation) RemovedTitlesIDs() (ids []int) {
	for id := range m.removedtitles {
		ids = append(ids, id)
	}
	return
}

// TitlesIDs returns the titles ids in the mutation.
func (m *TitleMutation) TitlesIDs() (ids []int) {
	for id := range m.titles {
		ids = append(ids, id)
	}
	return
}

// ResetTitles reset all changes of the "titles" edge.
func (m *TitleMutation) ResetTitles() {
	m.titles = nil
	m.removedtitles = nil
}

// Op returns the operation name.
func (m *TitleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Title).
func (m *TitleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TitleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Title_type != nil {
		fields = append(fields, title.FieldTitleType)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TitleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case title.FieldTitleType:
		return m.TitleType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TitleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case title.FieldTitleType:
		return m.OldTitleType(ctx)
	}
	return nil, fmt.Errorf("unknown Title field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TitleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case title.FieldTitleType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitleType(v)
		return nil
	}
	return fmt.Errorf("unknown Title field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TitleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TitleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TitleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Title numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TitleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TitleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TitleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Title nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TitleMutation) ResetField(name string) error {
	switch name {
	case title.FieldTitleType:
		m.ResetTitleType()
		return nil
	}
	return fmt.Errorf("unknown Title field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TitleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.titles != nil {
		edges = append(edges, title.EdgeTitles)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TitleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case title.EdgeTitles:
		ids := make([]ent.Value, 0, len(m.titles))
		for id := range m.titles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TitleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtitles != nil {
		edges = append(edges, title.EdgeTitles)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TitleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case title.EdgeTitles:
		ids := make([]ent.Value, 0, len(m.removedtitles))
		for id := range m.removedtitles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TitleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TitleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TitleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Title unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TitleMutation) ResetEdge(name string) error {
	switch name {
	case title.EdgeTitles:
		m.ResetTitles()
		return nil
	}
	return fmt.Errorf("unknown Title edge %s", name)
}
