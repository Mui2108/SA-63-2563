// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/panupong/app/ent/job"
	"github.com/panupong/app/ent/patient"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetJobName sets the Job_name field.
func (jc *JobCreate) SetJobName(s string) *JobCreate {
	jc.mutation.SetJobName(s)
	return jc
}

// SetJobID sets the job edge to Patient by id.
func (jc *JobCreate) SetJobID(id int) *JobCreate {
	jc.mutation.SetJobID(id)
	return jc
}

// SetNillableJobID sets the job edge to Patient by id if the given value is not nil.
func (jc *JobCreate) SetNillableJobID(id *int) *JobCreate {
	if id != nil {
		jc = jc.SetJobID(*id)
	}
	return jc
}

// SetJob sets the job edge to Patient.
func (jc *JobCreate) SetJob(p *Patient) *JobCreate {
	return jc.SetJobID(p.ID)
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	if _, ok := jc.mutation.JobName(); !ok {
		return nil, &ValidationError{Name: "Job_name", err: errors.New("ent: missing required field \"Job_name\"")}
	}
	if v, ok := jc.mutation.JobName(); ok {
		if err := job.JobNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Job_name", err: fmt.Errorf("ent: validator failed for field \"Job_name\": %w", err)}
		}
	}
	var (
		err  error
		node *Job
	)
	if len(jc.hooks) == 0 {
		node, err = jc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jc.mutation = mutation
			node, err = jc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(jc.hooks) - 1; i >= 0; i-- {
			mut = jc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	j, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	j.ID = int(id)
	return j, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		j     = &Job{config: jc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: job.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		}
	)
	if value, ok := jc.mutation.JobName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldJobName,
		})
		j.JobName = value
	}
	if nodes := jc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.JobTable,
			Columns: []string{job.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return j, _spec
}
