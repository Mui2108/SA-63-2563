// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/panupong/app/ent/gender"
	"github.com/panupong/app/ent/job"
	"github.com/panupong/app/ent/patient"
	"github.com/panupong/app/ent/title"
)

// PatientCreate is the builder for creating a Patient entity.
type PatientCreate struct {
	config
	mutation *PatientMutation
	hooks    []Hook
}

// SetCardID sets the Card_id field.
func (pc *PatientCreate) SetCardID(s string) *PatientCreate {
	pc.mutation.SetCardID(s)
	return pc
}

// SetFistName sets the Fist_name field.
func (pc *PatientCreate) SetFistName(s string) *PatientCreate {
	pc.mutation.SetFistName(s)
	return pc
}

// SetLastName sets the Last_name field.
func (pc *PatientCreate) SetLastName(s string) *PatientCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetAllergic sets the Allergic field.
func (pc *PatientCreate) SetAllergic(s string) *PatientCreate {
	pc.mutation.SetAllergic(s)
	return pc
}

// SetAge sets the age field.
func (pc *PatientCreate) SetAge(i int) *PatientCreate {
	pc.mutation.SetAge(i)
	return pc
}

// SetBirthday sets the Birthday field.
func (pc *PatientCreate) SetBirthday(t time.Time) *PatientCreate {
	pc.mutation.SetBirthday(t)
	return pc
}

// SetNillableBirthday sets the Birthday field if the given value is not nil.
func (pc *PatientCreate) SetNillableBirthday(t *time.Time) *PatientCreate {
	if t != nil {
		pc.SetBirthday(*t)
	}
	return pc
}

// SetPatientsID sets the patients edge to Gender by id.
func (pc *PatientCreate) SetPatientsID(id int) *PatientCreate {
	pc.mutation.SetPatientsID(id)
	return pc
}

// SetNillablePatientsID sets the patients edge to Gender by id if the given value is not nil.
func (pc *PatientCreate) SetNillablePatientsID(id *int) *PatientCreate {
	if id != nil {
		pc = pc.SetPatientsID(*id)
	}
	return pc
}

// SetPatients sets the patients edge to Gender.
func (pc *PatientCreate) SetPatients(g *Gender) *PatientCreate {
	return pc.SetPatientsID(g.ID)
}

// SetPatients1ID sets the patients1 edge to Title by id.
func (pc *PatientCreate) SetPatients1ID(id int) *PatientCreate {
	pc.mutation.SetPatients1ID(id)
	return pc
}

// SetNillablePatients1ID sets the patients1 edge to Title by id if the given value is not nil.
func (pc *PatientCreate) SetNillablePatients1ID(id *int) *PatientCreate {
	if id != nil {
		pc = pc.SetPatients1ID(*id)
	}
	return pc
}

// SetPatients1 sets the patients1 edge to Title.
func (pc *PatientCreate) SetPatients1(t *Title) *PatientCreate {
	return pc.SetPatients1ID(t.ID)
}

// SetPatients2ID sets the patients2 edge to Job by id.
func (pc *PatientCreate) SetPatients2ID(id int) *PatientCreate {
	pc.mutation.SetPatients2ID(id)
	return pc
}

// SetNillablePatients2ID sets the patients2 edge to Job by id if the given value is not nil.
func (pc *PatientCreate) SetNillablePatients2ID(id *int) *PatientCreate {
	if id != nil {
		pc = pc.SetPatients2ID(*id)
	}
	return pc
}

// SetPatients2 sets the patients2 edge to Job.
func (pc *PatientCreate) SetPatients2(j *Job) *PatientCreate {
	return pc.SetPatients2ID(j.ID)
}

// Mutation returns the PatientMutation object of the builder.
func (pc *PatientCreate) Mutation() *PatientMutation {
	return pc.mutation
}

// Save creates the Patient in the database.
func (pc *PatientCreate) Save(ctx context.Context) (*Patient, error) {
	if _, ok := pc.mutation.CardID(); !ok {
		return nil, &ValidationError{Name: "Card_id", err: errors.New("ent: missing required field \"Card_id\"")}
	}
	if v, ok := pc.mutation.CardID(); ok {
		if err := patient.CardIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "Card_id", err: fmt.Errorf("ent: validator failed for field \"Card_id\": %w", err)}
		}
	}
	if _, ok := pc.mutation.FistName(); !ok {
		return nil, &ValidationError{Name: "Fist_name", err: errors.New("ent: missing required field \"Fist_name\"")}
	}
	if v, ok := pc.mutation.FistName(); ok {
		if err := patient.FistNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Fist_name", err: fmt.Errorf("ent: validator failed for field \"Fist_name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.LastName(); !ok {
		return nil, &ValidationError{Name: "Last_name", err: errors.New("ent: missing required field \"Last_name\"")}
	}
	if v, ok := pc.mutation.LastName(); ok {
		if err := patient.LastNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Last_name", err: fmt.Errorf("ent: validator failed for field \"Last_name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Allergic(); !ok {
		return nil, &ValidationError{Name: "Allergic", err: errors.New("ent: missing required field \"Allergic\"")}
	}
	if v, ok := pc.mutation.Allergic(); ok {
		if err := patient.AllergicValidator(v); err != nil {
			return nil, &ValidationError{Name: "Allergic", err: fmt.Errorf("ent: validator failed for field \"Allergic\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Age(); !ok {
		return nil, &ValidationError{Name: "age", err: errors.New("ent: missing required field \"age\"")}
	}
	if v, ok := pc.mutation.Age(); ok {
		if err := patient.AgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Birthday(); !ok {
		v := patient.DefaultBirthday()
		pc.mutation.SetBirthday(v)
	}
	var (
		err  error
		node *Patient
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PatientCreate) SaveX(ctx context.Context) *Patient {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PatientCreate) sqlSave(ctx context.Context) (*Patient, error) {
	pa, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pa.ID = int(id)
	return pa, nil
}

func (pc *PatientCreate) createSpec() (*Patient, *sqlgraph.CreateSpec) {
	var (
		pa    = &Patient{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: patient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patient.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CardID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldCardID,
		})
		pa.CardID = value
	}
	if value, ok := pc.mutation.FistName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldFistName,
		})
		pa.FistName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldLastName,
		})
		pa.LastName = value
	}
	if value, ok := pc.mutation.Allergic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldAllergic,
		})
		pa.Allergic = value
	}
	if value, ok := pc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldAge,
		})
		pa.Age = value
	}
	if value, ok := pc.mutation.Birthday(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: patient.FieldBirthday,
		})
		pa.Birthday = value
	}
	if nodes := pc.mutation.PatientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.PatientsTable,
			Columns: []string{patient.PatientsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.Patients1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.Patients1Table,
			Columns: []string{patient.Patients1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.Patients2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.Patients2Table,
			Columns: []string{patient.Patients2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: job.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pa, _spec
}
