// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/panupong/app/ent/patient"
	"github.com/panupong/app/ent/title"
)

// Title is the model entity for the Title schema.
type Title struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TitleType holds the value of the "Title_type" field.
	TitleType string `json:"Title_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TitleQuery when eager-loading is set.
	Edges          TitleEdges `json:"edges"`
	patient_titles *int
}

// TitleEdges holds the relations/edges for other nodes in the graph.
type TitleEdges struct {
	// Title holds the value of the title edge.
	Title *Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TitleOrErr returns the Title value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TitleEdges) TitleOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.Title == nil {
			// The edge title was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Title, nil
	}
	return nil, &NotLoadedError{edge: "title"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Title) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Title_type
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Title) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // patient_titles
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Title fields.
func (t *Title) assignValues(values ...interface{}) error {
	if m, n := len(values), len(title.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Title_type", values[0])
	} else if value.Valid {
		t.TitleType = value.String
	}
	values = values[1:]
	if len(values) == len(title.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_titles", value)
		} else if value.Valid {
			t.patient_titles = new(int)
			*t.patient_titles = int(value.Int64)
		}
	}
	return nil
}

// QueryTitle queries the title edge of the Title.
func (t *Title) QueryTitle() *PatientQuery {
	return (&TitleClient{config: t.config}).QueryTitle(t)
}

// Update returns a builder for updating this Title.
// Note that, you need to call Title.Unwrap() before calling this method, if this Title
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Title) Update() *TitleUpdateOne {
	return (&TitleClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Title) Unwrap() *Title {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Title is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Title) String() string {
	var builder strings.Builder
	builder.WriteString("Title(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", Title_type=")
	builder.WriteString(t.TitleType)
	builder.WriteByte(')')
	return builder.String()
}

// Titles is a parsable slice of Title.
type Titles []*Title

func (t Titles) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
